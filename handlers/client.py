from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_base import mysql_db
from create_bot import bot
from keyboards import client_kb
from collections import deque
import json
import datetime
from config.config import conf


# /start, /help - handler. Start message
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∞–º:\n\n"
                         "üöé/üöå - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–¥–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ.\n\n"
                         "üïê - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n\n"
                         "üîéüöç - –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–æ–µ—Ö–∞—Ç—å –∏–∑ —Ç–æ—á–∫–∏ –ê –≤ —Ç–æ—á–∫—É –ë.\n\n"
                         "üó∫ - –µ—Å–ª–∏ —Ç—ã —Ç—É—Ä–∏—Å—Ç –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è, —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É =).\n\n"
                         "üí∞ - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–æ–µ–∑–¥ –∏ –ø—Ä–æ–µ–∑–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã.\n\n"
                         "üí¨ - —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å\n\n",
                         reply_markup=client_kb.get_main_kb())


# definition StatesGroup
class TransRouteState(StatesGroup):
    waiting_for_trans_type = State()
    waiting_for_trans_num = State()
    waiting_for_trans_route_id = State()


# üöé/üöå command handler
async def trans_route_handler(message: types.Message):
    # send a message with an explanation to the keyboard
    await message.answer("üöé - —Ç—Ä–æ–ª–ª–µ–π–±—É—Å—ã\n"
                         "üöå - –∞–≤—Ç–æ–±—É—Å—ã\n"
                         "–û—Ç–º–µ–Ω–∞ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                         reply_markup=client_kb.get_trans_choice_kb())
    await TransRouteState.waiting_for_trans_type.set()


# TransRouteState.waiting_for_trans_type
async def process_transport_type(message: types.Message, state: FSMContext):
    # checking message for entry in üöé or üöå
    if message.content_type == types.ContentType.TEXT and message.text in ["üöé", "üöå"]:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è –±—É–∫–≤–∞ –≤ –Ω–æ–º–µ—Ä–µ –ø–∏—à–∏—Ç–µ –µ–µ –Ω–∞ –∫—Ä–∏–ª–∏—Ü–µ —Å–ª–∏—Ç–Ω–æ..\n"
                             "–ü—Ä–∏–º–µ—Ä: 11–±, 2–∞", reply_markup=client_kb.get_cancel_kb())
        trans_type = True
        if message.text == "üöé":
            trans_type = False
        async with state.proxy() as data:
            data['trans_type'] = trans_type
        await TransRouteState.waiting_for_trans_num.set()
    else:
        await message.answer('–û–π –æ–π –æ–π, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ üöé, üöå –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"')


# cancellation handler | ONLY FOR STATE HANDLERS
async def proccess_cancel(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=client_kb.get_main_kb())
    await state.finish()


# Handler for the State TransRouteState.waiting_for_trans_num state
async def proccess_trans_num(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentType.TEXT:
        async with state.proxy() as data:
            # Extracting the value of trans_type from the user's session
            # The initialization took place in the process_transport_type function
            trans_type = data['trans_type']
        trans_names = await mysql_db.get_trans_name_by_num(mysql_db.pool, message.text, trans_type)
        # Checking if there were any transport names found
        if trans_names:
            # Creating an inline keyboard
            markup = types.InlineKeyboardMarkup()
            for trans in trans_names:
                button = types.InlineKeyboardButton(trans['trans_name'], callback_data=f"trans_id_{trans['trans_id']}")
                markup.add(button)

            await message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:", reply_markup=markup)
            await TransRouteState.waiting_for_trans_route_id.set()
        else:  # If no transport was found
            if trans_type:
                trans_type = "–ê–≤—Ç–æ–±—É—Å–∞"
            else:
                trans_type = "–¢—Ä–æ–ª–ª–µ–π–±—É—Å–∞"
            await message.answer(f"{trans_type} —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞—à–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å."
                                 f" –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:  # If the incoming message is not text
        await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")


# Handler for processing a callback for the State TransRouteState.waiting_for_trans_route_id
async def process_transport_route_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # Extract the transport id from the callback data
    trans_id = callback_query.data.replace("trans_id_", "")

    route_name = await mysql_db.get_trans_by_id(mysql_db.pool, int(trans_id))
    route_stops = await mysql_db.get_route_by_trans_id(mysql_db.pool, int(trans_id))

    # Construct the response message
    response = f"–û—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ {route_name['trans_name']}:"

    # Delete the original message from the bot to keep the chat clean
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    # Create an inline keyboard for the stops on the route
    markup = types.InlineKeyboardMarkup()
    for route in route_stops:
        button = types.InlineKeyboardButton(route['stop_name'], callback_data=f"route_id_{route['route_id']}")
        markup.add(button)

    await bot.send_message(callback_query.from_user.id, response, reply_markup=markup)
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "
                                                        "–¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ",
                           reply_markup=client_kb.get_main_kb())
    await state.finish()


# Asynchronous function to process a callback with route stop information
async def process_timeboard_for_route_stop(callback_query: types.CallbackQuery):
    # Extract the route id from the callback data
    route_id = callback_query.data.replace("route_id_", "")

    trans_num, trans_name, trans_type, stop_name, timeboard_new = \
        await mysql_db.get_schedule_by_route_id(mysql_db.pool, int(route_id))
    timeboard_new = json.loads(timeboard_new)

    # Delete the original message from the bot to keep the chat clean
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    # Nested function to format the timeboard
    def format_timeboard(timeboard):
        hours = {}
        for time in timeboard:
            hour, minute = time.split(':')
            if hour not in hours:
                hours[hour] = []
            hours[hour].append(minute)

        formatted_timeboard = ''
        for hour, minutes in hours.items():
            formatted_timeboard += f'{hour}: {"| ".join(minutes)}\n'
        return formatted_timeboard

    # Determine the type of transport based on the value of trans_type
    if trans_type:
        trans_type = "–∞–≤—Ç–æ–±—É—Å–∞"
    else:
        trans_type = "—Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞"

    # Begin constructing the response message
    response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {trans_type} ‚Ññ{trans_num}\n{trans_name}\n" \
               f"–ù–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {stop_name}\n"

    # Add each day's schedule to the response message
    for day, times in timeboard_new.items():
        response += f"{day}\n{format_timeboard(times)}\n"

    await callback_query.message.answer(response)


# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ StatesGroup
class StopState(StatesGroup):
    waiting_for_stop = State()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã üïê
async def stop_timeboard_handler(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–±–æ –µ–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!",
                         reply_markup=client_kb.get_cancel_kb())
    await StopState.waiting_for_stop.set()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def process_stop(message: types.Message):
    sought_stops = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type == types.ContentType.TEXT:
        stops = await mysql_db.get_stops_levenshtein_distance(mysql_db.pool, message.text)
        if not stops:
            await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ')
        else:
            min_distance = min(stops, key=lambda x: x['distance'])['distance']
            if min_distance == 0:
                sought_stops = [stop for stop in stops if stop['distance'] == 0]
            else:
                sought_stops = stops
    elif message.content_type == types.ContentType.LOCATION:
        stops = await mysql_db.get_stops_by_location(mysql_db.pool, message.location.latitude, message.location.longitude)
        if not stops:
            await message.answer('–í —Ä–∞–¥–∏—É—Å–µ 100 –º–µ—Ç—Ä–æ–≤ –æ—Ç —Ç–æ—á–∫–∏ –Ω–µ—Ç—É –æ—Å—Ç–∞–Ω–æ–≤–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ '
                                 '–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º')
        else:
            sought_stops = stops
    else:
        await message.answer(
            '–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ª–∏–±–æ –µ–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')
    if sought_stops:
        markup = types.InlineKeyboardMarkup()
        for stop in sought_stops:
            button = types.InlineKeyboardButton(stop['stop_name'] + " " + stop['add_info'],
                                                callback_data=f"stop_id_{stop['stop_id']}")
            markup.add(button)
        await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É —Å–ª–µ–¥—É—é—â–µ–µ, –µ—Å–ª–∏ –Ω–∏–∂–µ –Ω–µ—Ç –≤–∞—â–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, "
                             "—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≥–æ.", reply_markup=markup)


async def process_stop_id_callback(callback_query: types.CallbackQuery, state: FSMContext):
    stop_id = callback_query.data.replace("stop_id_", "")
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    timeboards = await mysql_db.get_schedule_by_stop_id(mysql_db.pool, int(stop_id))

    now = datetime.datetime.now()
    weekday = now.weekday()  # 0 - Monday, 1 - Tuesday, ..., 5 - Saturday, 6 - Sunday

    schedule_str = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {timeboards[0]['stop_name']}\n{timeboards[0]['add_info']}\n"
    for trans in timeboards:
        trans_type = "–ê–≤—Ç–æ–±—É—Å" if trans['trans_type'] else "–¢—Ä–æ–ª–ª–µ–π–±—É—Å"
        schedule_str += f"{trans_type} ‚Ññ{trans['trans_num']}:\n"

        # Select weekday, weekend or specific day schedule depending on current day
        time_board_new = json.loads(trans['time_board'])

        if weekday < 5:  # Monday to Friday
            time_board = time_board_new.get('–ë—É–¥–Ω–∏', [])
            no_service_message = "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ë—É–¥–Ω–∏"
        elif weekday == 5:  # Saturday
            time_board = time_board_new.get('–°—É–±–±–æ—Ç–∞', time_board_new.get('–í—ã—Ö–æ–¥–Ω—ã–µ', []))
            no_service_message = "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –í—ã—Ö–æ–¥–Ω—ã–µ"
        elif weekday == 6:  # Sunday
            time_board = time_board_new.get('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', time_board_new.get('–í—ã—Ö–æ–¥–Ω—ã–µ', []))
            no_service_message = "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –í—ã—Ö–æ–¥–Ω—ã–µ"

        if not time_board:
            schedule_str += f"{no_service_message}\n"
            continue

        time_list = [datetime.datetime.strptime(time_str, '%H:%M').time() for time_str in time_board]
        next_hour_time_list = [t for t in time_list if t > now.time() and t <= (
                datetime.datetime.combine(datetime.date.today(), now.time()) + datetime.timedelta(hours=1)).time()]

        if not next_hour_time_list:
            next_hour_time_list.extend([t for t in time_list if t > now.time()][:3])

        if next_hour_time_list:
            for time_item in next_hour_time_list:
                schedule_str += f"{time_item.strftime('%H:%M')}, "
            schedule_str = schedule_str.rstrip(", ") + "\n"
        else:
            schedule_str += "–ú–∞—Ä—à—Ä—É—Ç –æ–∫–æ–Ω—á–∏–ª –¥–≤–∏–∂–µ–Ω–∏–µ!\n"
    await callback_query.message.answer(schedule_str, reply_markup=client_kb.get_main_kb())
    await state.finish()


# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ StatesGroup
class RouteState(StatesGroup):
    waiting_for_first_location = State()
    waiting_for_second_location = State()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã üîéüöç
async def cmd_distance(message: types.Message):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –ø–µ—Ä–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.",
                         reply_markup=client_kb.get_cancel_kb())
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await RouteState.waiting_for_first_location.set()


async def find_stop_by_name(message, callback_tag):
    stop = None
    """func takes two argument:
        message: aiogram.types.Message
        callback_tag: str - tag
    """
    rows = await mysql_db.get_stops_levenshtein_distance(mysql_db.pool, message.text)
    if not rows:
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ')
    else:
        min_distance_row = min(rows, key=lambda x: x['distance'])
        stops_set = {row['stop_name'] for row in rows}
        # –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ª–∏–±–æ –µ—Å–ª–∏ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –ø–æ–∫–∞–∑–∞–ª —Ç–æ–ª—å–∫–æ 1 –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        if min_distance_row['distance'] == 0 or len(stops_set) == 1:
            stop = min_distance_row['stop_name']
        # –µ—Å–ª–∏ –≤ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–µ –±–æ–ª–µ–µ 1–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        else:
            keyboard = []
            for stp in stops_set:
                button = types.InlineKeyboardButton(stp, callback_data=f'{callback_tag}{stp}')
                keyboard.append(button)
            markup = types.InlineKeyboardMarkup().row(*keyboard)
            await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É —Å–ª–µ–¥—É—é—â–µ–µ, –µ—Å–ª–∏ –Ω–∏–∂–µ –Ω–µ—Ç –≤–∞—â–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, "
                                 "—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≥–æ.", reply_markup=markup)
    return stop


async def find_stop_by_location(message, callback_tag):
    stop = None
    """func takes two argument:
        message: aiogram.types.Message
        callback_tag: str - tag
    """
    rows = await mysql_db.get_stops_by_location(mysql_db.pool, message.location.latitude, message.location.longitude)
    if not rows:
        await message.answer(
            '–í —Ä–∞–¥–∏—É—Å–µ 100 –º–µ—Ç—Ä–æ–≤ –æ—Ç —Ç–æ—á–∫–∏ –Ω–µ—Ç—É –æ—Å—Ç–∞–Ω–æ–≤–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –±–æ–ª–µ–µ '
            '—Ç–æ—á–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º')
    else:
        stops_set = {row[0] for row in rows}
        if len(stops_set) == 1:
            stop = rows[0][0]
        # –µ—Å–ª–∏ –≤ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–µ –±–æ–ª–µ–µ 1–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        else:
            keyboard = []
            for stp in stops_set:
                button = types.InlineKeyboardButton(stp, callback_data=f'{callback_tag}{stp}')
                keyboard.append(button)
            markup = types.InlineKeyboardMarkup().row(*keyboard)
            await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É —Å–ª–µ–¥—É—é—â–µ–µ, –µ—Å–ª–∏ –Ω–∏–∂–µ –Ω–µ—Ç –≤–∞—â–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, "
                                 "—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≥–æ.", reply_markup=markup)
    return stop


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def process_first_stop(message: types.Message, state: FSMContext):
    stop = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type == types.ContentType.TEXT:
        stop = await find_stop_by_name(message, "firstStop_")
    elif message.content_type == types.ContentType.LOCATION:
        stop = await find_stop_by_location(message, "firstStop_")
    else:
        await message.answer(
            '–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ª–∏–±–æ –µ–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–æ–≥–ª–∏ –ª–∏ –º—ã –Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    if stop is not None:
        async with state.proxy() as data:
            data['first_stop'] = stop
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –≤—Ç–æ—Ä—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.")
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        await RouteState.waiting_for_second_location.set()


async def process_first_stop_callback(callback_query: types.CallbackQuery, state: FSMContext):
    stop_name = callback_query.data.replace("firstStop_", "")
    async with state.proxy() as data:
        data['first_stop'] = stop_name
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –≤—Ç–æ—Ä—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.")
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await RouteState.waiting_for_second_location.set()


def bfs_paths(graph, start, goal):
    visited = {start}
    queue = deque([(start, [])])

    while queue:
        node, path = queue.popleft()
        for trans_id, stops in graph.items():
            if node in stops:
                for neighbor in stops:
                    if neighbor not in visited:
                        new_path = path + [(trans_id, node)]
                        if neighbor == goal:
                            yield new_path + [(trans_id, neighbor)]
                        else:
                            visited.add(neighbor)
                            queue.append((neighbor, new_path))


async def find_route_with_transfers(start_stop, end_stop):
    stops = await mysql_db.get_stops_by_names(mysql_db.pool,  start_stop, end_stop)
    routs = await mysql_db.get_all_routs(mysql_db.pool)
    graph = {}
    for route in routs:
        if route["trans_id"] not in graph:
            graph[route["trans_id"]] = set()
        graph[route["trans_id"]].add(route["cur_stop_id"])

    start_ids = [stop["stop_id"] for stop in stops if stop["stop_name"] == start_stop]
    end_ids = [stop["stop_id"] for stop in stops if stop["stop_name"] == end_stop]

    shortest_path = None
    min_transfers = float("inf")

    for start_id in start_ids:
        for end_id in end_ids:
            paths = bfs_paths(graph, start_id, end_id)
            for path in paths:
                transfers = len(set(transfer for transfer, _ in path)) - 1
                if transfers < min_transfers:
                    min_transfers = transfers
                    shortest_path = path

    if shortest_path is None:
        return "No routes found between the given stops."

    # Get transport and stop details for the shortest_path
    transport_stop_details = []
    for trans_id, stop_id in shortest_path:
        transport_details = await mysql_db.get_trans_by_id(mysql_db.pool, trans_id)
        stop_details = await mysql_db.get_stop_by_id(mysql_db.pool, stop_id)
        transport_stop_details.append((transport_details, stop_details))

    # Format the output
    output = []
    for i, (transport, stop) in enumerate(transport_stop_details):
        trans_type = "–∞–≤—Ç–æ–±—É—Å" if transport["trans_type"] else "—Ç—Ä–æ–ª–ª–µ–π–±—É—Å"

        if i == 0:
            output.append(f"–°–∞–¥–∏–º—Å—è –Ω–∞ {trans_type} ‚Ññ{transport['trans_num']} –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {stop['stop_name']}")
        elif transport_stop_details[i - 1][0]["trans_id"] != transport["trans_id"]:
            output.append(f"–ü–µ—Ä–µ—Å–∞–¥–∫–∞ –Ω–∞ {trans_type} ‚Ññ{transport['trans_num']} –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {stop['stop_name']}")
        else:
            continue

    output.append(f"–í—ã—Ö–æ–¥–∏–º –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {transport_stop_details[-1][1]['stop_name']}")

    return "\n".join(output)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def process_second_stop(message: types.Message, state: FSMContext):
    stop = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type == types.ContentType.TEXT:
        stop = await find_stop_by_name(message, "secondStop_")
    elif message.content_type == types.ContentType.LOCATION:
        stop = await find_stop_by_location(message, "secondStop_")
    else:
        await message.answer(
            '–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ª–∏–±–æ –µ–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–æ–≥–ª–∏ –ª–∏ –º—ã –Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    if stop is not None:
        async with state.proxy() as data:
            first_stop = data['first_stop']
        second_stop = stop
        s = await find_route_with_transfers(first_stop, second_stop)
        await message.answer(s, reply_markup=client_kb.get_main_kb())
        await state.finish()


async def process_second_stop_callback(callback_query: types.CallbackQuery, state: FSMContext):
    stop_name = callback_query.data.replace("secondStop_", "")
    async with state.proxy() as data:
        first_stop = data['first_stop']
    second_stop = stop_name
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    s = await find_route_with_transfers(first_stop, second_stop)
    await bot.send_message(callback_query.from_user.id, s, reply_markup=client_kb.get_main_kb())
    await state.finish()


# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ StatesGroup
class NearStopState(StatesGroup):
    waiting_for_location = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ üó∫ (–Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É)
async def nearest_stop_handler(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ–º–µ—Å—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.",
                         reply_markup=client_kb.get_nearest_stop_kb())
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await NearStopState.waiting_for_location.set()


async def process_location(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentType.LOCATION:
        closest_stop = await mysql_db.get_nearest_stop(mysql_db.pool, message.location.latitude, message.location.longitude)
        await message.answer(f"–ë–ª–∏–∂–∞–π—à–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {closest_stop['stop_name']}", reply_markup=client_kb.get_main_kb())
        await bot.send_location(chat_id=message.chat.id, latitude=closest_stop['latitude'],
                                longitude=closest_stop['longitude'])
        await state.finish()
    else:
        await message.answer('–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!')


def format_prices(prices):
    formatted_prices = {}
    for price in prices:
        ticket_type = price['type']
        location = price['location']
        price_value = price['price']

        if ticket_type not in formatted_prices:
            formatted_prices[ticket_type] = []
        formatted_prices[ticket_type].append((location, price_value))

    output = ""
    for ticket_type, info_list in formatted_prices.items():
        if len(info_list) > 1:
            output += f"{ticket_type}:\n"
            for i, (location, price_value) in enumerate(info_list, 1):
                output += f"    {i}) {location} - {price_value:.2f}\n"
        else:
            location, price_value = info_list[0]
            output += f"{ticket_type} - {location} - {price_value:.2f}"
        output += "\n"
    return output.strip()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ üí∞ (—É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–æ–µ–∑–¥)
async def price_handler(message: types.Message):
    prices = await mysql_db.get_prices(mysql_db.pool)
    await message.answer(format_prices(prices))


# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ StatesGroup
class CommentState(StatesGroup):
    waiting_for_comment = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ üí¨ (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
async def comment_handler(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.",
                         reply_markup=client_kb.get_cancel_kb())
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await CommentState.waiting_for_comment.set()


async def leave_comment_process(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.")

    await state.finish()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mysql_db.save_comment(mysql_db.pool, message.from_user.id, message.text)

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –û–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=client_kb.get_main_kb())

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await bot.send_message(conf.get('bot', 'admin_id'), f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                                                        f"(ID: {message.from_user.id}):\n\n{message.text}")


def register_handlers_client(dp: Dispatcher):
    # start handler
    dp.register_message_handler(start_handler, commands=['start', 'help'])
    # unique cancel handler
    dp.register_message_handler(proccess_cancel, text="–û—Ç–º–µ–Ω–∞", state=[TransRouteState.waiting_for_trans_type,
                                                                       TransRouteState.waiting_for_trans_num,
                                                                       TransRouteState.waiting_for_trans_route_id,
                                                                       StopState.waiting_for_stop,
                                                                       RouteState.waiting_for_first_location,
                                                                       RouteState.waiting_for_second_location,
                                                                       NearStopState.waiting_for_location,
                                                                       CommentState.waiting_for_comment])

    # show trans route
    dp.register_message_handler(trans_route_handler, text="üöé/üöå")
    # üöé/üöå - handlers
    dp.register_message_handler(process_transport_type, content_types=types.ContentType.ANY,
                                state=TransRouteState.waiting_for_trans_type)
    dp.register_message_handler(proccess_trans_num, content_types=types.ContentType.ANY,
                                state=TransRouteState.waiting_for_trans_num)
    dp.register_callback_query_handler(process_transport_route_callback,
                                       lambda callback_query: callback_query.data.startswith('trans_id_'),
                                       state=TransRouteState.waiting_for_trans_route_id)
    dp.register_callback_query_handler(process_timeboard_for_route_stop,
                                       lambda callback_query: callback_query.data.startswith('route_id_'))

    # show stop schedule
    dp.register_message_handler(stop_timeboard_handler, text="üïê")
    # üïê - handlers
    dp.register_message_handler(process_stop, content_types=types.ContentType.ANY,
                                state=StopState.waiting_for_stop)
    dp.register_callback_query_handler(process_stop_id_callback,
                                       lambda callback_query: callback_query.data.startswith('stop_id_'),
                                       state=StopState.waiting_for_stop)

    # find route between stops
    dp.register_message_handler(cmd_distance, text="üîéüöç")
    # üîéüöç - handlers
    dp.register_message_handler(process_first_stop, content_types=types.ContentType.ANY,
                                state=RouteState.waiting_for_first_location)
    dp.register_callback_query_handler(process_first_stop_callback,
                                       lambda callback_query: callback_query.data.startswith('firstStop_'),
                                       state=RouteState.waiting_for_first_location)
    dp.register_message_handler(process_second_stop, content_types=types.ContentType.ANY,
                                state=RouteState.waiting_for_second_location)
    dp.register_callback_query_handler(process_second_stop_callback,
                                       lambda callback_query: callback_query.data.startswith('secondStop_'),
                                       state=RouteState.waiting_for_first_location)

    # find nearest stop
    dp.register_message_handler(nearest_stop_handler, text="üó∫")
    # üó∫ - handlers
    dp.register_message_handler(process_location, content_types=types.ContentType.ANY,
                                state=NearStopState.waiting_for_location)

    # get current prices
    dp.register_message_handler(price_handler, text="üí∞")

    # leave comment
    dp.register_message_handler(comment_handler, text="üí¨")
    # üí¨ - handlers
    dp.register_message_handler(leave_comment_process, content_types=types.ContentType.ANY,
                                state=CommentState.waiting_for_comment)
